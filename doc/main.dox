/**
 *
\mainpage Main page

\section Description API documentation
This is the API documentation for users of Trodes to write Python or C++ programs to connect and stream data with Trodes and other modules. 

To get started, look at the AbstractModuleClient class in the documentation, and the test/example Python scripts for example usage of streaming data. 

\section Install Installation notes
For more detailed installation notes, please see the README file included in the library zip
\code{.txt}
	Python3:
		Type into terminal the following

			python3 -m pip install spikegadgets_python/ --user

			IMPORTANT NOTES: 
			- If you already installed the package before, append "--upgrade" to update the package
			- numpy will be installed if it is not already
			- Windows users: change the slash at the end of spikegadgets_python/ to use "\"

		To use:

			$ python3
			>>> from spikegadgets import trodesnetwork
\endcode 

\section Examples Example usage
\subsection Python Python example

\code{.py}
from spikegadgets import trodesnetwork as tnp
import numpy
#Define this for breaking loop, comes in later
stillrunning = True
def stoploop():
    global stillrunning
    stillrunning = False


#Definition of network client class
class PythonClient(tnp.AbstractModuleClient):
    def recv_quit(self):
        stoploop()


#Connect and initialize
network = PythonClient("TestPython", "tcp://127.0.0.1",49152)
if network.initialize() != 0:
    print("Network could not successfully initialize")
    del network
    quit()

datastream = network.subscribeLFPData(100, ['1','2', '5', '6', '7', '8', '10'])
datastream.initialize() #Initialize the streaming object

###############################
## Main Loop
###############################

buf = datastream.create_numpy_array()
timestamp = 0
#Continuously get data until Trodes tells us to quit, which triggers the function that flips the "stillrunning" variable
while stillrunning:
    #Get the number of data points that came in
    n = datastream.available(1000) #timeout in ms
    #Go through and grab all the data packets, processing one at a time
    for i in range(n):
        timestamp = datastream.getData() 
        print(buf)

        
#Cleanup
del network

\endcode

  \example pythonPackaging/testnetwork.py
  \example libTrodesNetwork/LFP_Camera_Data.cpp


 */
